{"version":3,"sources":["assets/Control.js","assets/NaiveNetClient-mini.2.0.1.dev.js","assets/net.js"],"names":["cc","Class","extends","Component","properties","net","default","type","Node","onLoad","run","res","this","getComponent","location","getLocation","startrun","node","on","bind","stop","stoprun","start","format","callback","param","success","fail","complete","_success","_fail","codemap","200","400","401","402","403","404","500","501","502","503","handler","outdata","data","wx","tt","NaiveModule","_ctrls","_proto2","addController","name","func","response","removeController","_do","opt","controller","NaiveNet","autocode","_sockettask","_level","_autocode","_t_msg","_t_wt","_timeout","_ping","_hearttimeout","_auth","_sessionid","_ns","_channel","_channel_cache","_boxs","onBreak","onRecover","onAuth","onPingChange","_donotcallOnbreak","_proto3","setToken","token","getToken","connect","close","connectSocket","url","ns","code","errmsg","onOpen","_autoheart","onClose","_onBreak","onMessage","_parseMsg","onError","level","WebSocket","binaryType","onopen","onclose","onmessage","onerror","_this","request","undefined","eventstatus","recover","_this2","channel","enterChannel","_this3","key","cache","quitChannel","_this4","getChannelID","id","_this5","database","parseInt","_this6","res2","second","_opt","channelid","_request","createBox","addBox","mod","i","length","push","removeBox","j","pop","channelID","record","Date","getTime","_stringToArrayBuffer","channelIDData","_genLenArrayBuffer","controllerData","controllerDataU8","Uint8Array","controllerHeader","contentData","contentDataU8","contentDataHeader","_dataA","ArrayBuffer","_data","set","index","send","buffer","setTimeout","_sendCheckWt","e","next","udata","msgid","_index","channelid_data","_parseLenArrayBuffer","end","ctrl_len","ctrl_content","_parseContentArrayBuffer","_param_len","_param_content","_dealNSToClient","Uint8ArrayToString","_dealNCToClient","originContent","originHeaderEndIndex","originMsgID","originChannelID","dataBytes","msg","channel_data","param_len","param_content","ping","_setPing","clearTimeout","originData","t","_response","data_U8","data_len","content","_content","item","shift","getPing","value","n","a","len","str","c","bytes","Array","charCodeAt","array","Int8Array","_arrayBufferToString","arr","dataview","DataView","ints","byteLength","getUint8","_arr","one","toString","v","match","bytesLength","store","slice","st","String","fromCharCode","out","char2","char3","require","colormap","color","canvas","Label","ctx","x_b","y_b","line_w","running","step","uploading","needUpload","Graphics","lineWidth","strokeColor","console","log","string","box","json","ob","JSON","parse","drawNet","drawBall","update","dt","drawOthersBall","clear","width","height","y","moveTo","lineTo","x","stroke","fillColor","circle","fill","center","dx","dy","cosa","Math","sqrt","acos","cos","sin","upload","stringify"],"mappings":"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","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        net:{\r\n            default:null,\r\n            type:cc.Node\r\n        }\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n\r\n        //开始移动事件\r\n        let run = function(res){\r\n            //确定移动方向\r\n            let net = this.net.getComponent(\"net\");\r\n            let location = res.getLocation();   // x:location.x y:location 相对于屏幕的左下角\r\n            net.startrun(location);\r\n        }\r\n        this.node.on('touchstart',run.bind(this));\r\n\r\n        //停止移动事件\r\n        let stop = function(res){\r\n            let net = this.net.getComponent(\"net\");\r\n            net.stoprun();\r\n        }\r\n        this.node.on('touchend',stop.bind(this));\r\n        this.node.on('touchcancel',stop.bind(this));\r\n        this.node.on('touchmove',run.bind(this));\r\n\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","/*\n    NaiveNet\n    NaiveNetClient-MiniProgame.2.0.0.js\n    Author: Xinyu Liu\n*/\n\nclass Format {\n\n    callback(param) {\n        param.success = param.success || function () { };\n        param.fail = param.fail || function () { };\n        param.complete = param.complete || function () { };\n        param._success = function (res) {\n            param.success(res);\n            param.complete(res);\n        };\n        param._fail = function (res) {\n            param.fail(res);\n            param.complete(res);\n        };\n    }\n\n}\n\nconst format = new Format();\n\nconst codemap = {\n\n    200 : 'ok',\n    400 : 'not found controller',\n    401 : 'not found channel',\n    402 : 'cannot be established',\n    403 : 'channel refuse connect',\n    404 : 'channel not established with server',\n    500 : 'permission denied',\n    501 : 'data format error',\n    502 : 'unknow error',\n    503 : 'recover failed',\n\n}\n\n//evn\nlet handler = null;\nif(\"undefined\" != typeof wx){ //微信小程序环境\n    handler = wx;\n}else if(\"undefined\" != typeof tt){ //字节跳动小程序环境\n    handler = tt;\n}\nfunction outdata(data){\n    if(handler){\n        return {data:data};\n    }else{\n        return data;\n    }\n}\n\nclass NaiveModule{\n\n    constructor(){\n\n        this._ctrls= {};\n    }\n\n    addController(name,func = function(param,response = function(){}){}){\n        this._ctrls[name] = func;\n    }\n\n    removeController(name){\n        if(this._ctrls[name])\n            this._ctrls[name] = null;\n    }\n\n    _do(opt,callback = function(){}){\n        if(this._ctrls[opt.controller]){\n            this._ctrls[opt.controller](opt,callback);\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n}\n\nexport default class NaiveNet {\n\n    constructor(autocode = true){\n        this._sockettask = null;\n        this._level = 0;    // 1 是连接状态 0 是断开状态\n        this._autocode = autocode;\n\n        //临时ID资源管理\n        this._t_msg = [];   //已发出消息\n        this._t_wt = [];    //等待中消息\n\n        //回执请求超时\n        this._timeout = 5000;   //超过5000秒未收到回执则请求超时\n\n        //ping值\n        this._ping = 0;\n        this._hearttimeout = 10000; //心跳 默认每隔10秒心跳一次\n\n        this._auth = false;\n        this._sessionid = '';\n        this._ns = \"\";\n\n        //频道信息\n        this._channel = {}\n        this._channel_cache = {}\n\n        //boxs\n        this._boxs = [];\n\n        //几组基本事件\n        this.onBreak = function(){};\n        this.onRecover = function(){};\n        this.onAuth = function(){}\n        this.onPingChange = function(){}\n\n        this._donotcallOnbreak =false;\n\n    }\n\n    /*\n        设置SESSION TOKEN\n    */\n    setToken(token){\n        this._sessionid = token;\n    }\n\n    /*\n        获取本机SESSION TOKEN\n    */\n    getToken(){\n        if(this._auth)\n            return this._sessionid;\n        return null;\n    }\n\n\n    /*\n        与NS服务器建立连接\n        opt = {\n            'ns' => '',\n            success , fail , complete\n        }\n    */\n    connect(opt){\n        opt = opt || {};\n        format.callback(opt);\n        this.close();\n\n        if(handler){\n            this._sockettask = handler.connectSocket({\n                url:  opt.ns,\n                success:(res)=>{\n\n                },\n                fail:(res)=>{\n                    opt._fail({\n                        code:400,\n                        errmsg:'无法建立网络连接'\n                    })\n                }\n            })\n\n            this._sockettask.onOpen(function(){\n                this._level = 1;\n                this._ns = opt.ns;\n                opt._success({\n                    code:200,\n                    errmsg:'成功建立连接'\n                })\n                this._autoheart();\n                return;\n            }.bind(this));\n            this._sockettask.onClose( function(res){\n                this._level = 0;\n                this._onBreak();\n            }.bind(this));\n            this._sockettask.onMessage( function(res){\n                this._parseMsg(res)\n            }.bind(this))\n            this._sockettask.onError(function(res){\n                this.level = 0;\n                opt._fail({\n                    code:400,\n                    errmsg:'网络连接失败'\n                })\n            }.bind(this))\n\n        }else{\n            this._sockettask = new WebSocket(opt.ns);\n            this._sockettask.binaryType = \"arraybuffer\";\n            if(!this._sockettask){\n                opt._fail({\n                    code:400,\n                    errmsg:'连接失败'\n                })\n                return;\n            }\n            this._sockettask.onopen = function(){\n                this._level = 1;\n                this._ns = opt.ns;\n                opt._success({\n                    code:200,\n                    errmsg:'成功建立连接'\n                })\n                this._autoheart();\n                return;\n            }.bind(this);\n            this._sockettask.onclose = function(res){\n                //console.log(res);\n                this._level = 0;\n                this._onBreak();\n            }.bind(this);\n            this._sockettask.onmessage = function(res){\n                this._parseMsg(res)\n    \n            }.bind(this);\n            this._sockettask.onerror = function(res){\n                opt._fail({\n                    code:400,\n                    errmsg:'连接失败'\n                })\n                return;\n            }.bind(this);\n        }\n    }\n\n    /*\n        主动关闭连接（不可恢复 服务器资源将立即被释放）\n    */\n    close(opt){\n        opt = opt || {};\n        format.callback(opt);\n        if(this._sockettask){\n            this.request({\n                controller:'close',\n                complete:(res)=>{\n                    this._sockettask.close();\n                    this._level = 0;\n                    opt._success({\n                        code:200\n                    })\n                }\n            })\n        }else{\n            opt._success({\n                code:200\n            })\n        }\n\n    }\n\n    /*\n        主动临时断线（可恢复）\n        opt = {\n            eventstatus    是否想产生onbreak的事件回调 不填写则代表产生回调 否则 不产生\n        }\n    */\n    break(opt){\n        opt = opt || {};\n        format.callback(opt);\n        if(this._level == 1){\n            this._level = 0;\n\n            if(opt.eventstatus === undefined)\n                opt.eventstatus = true;\n\n            if(!opt.eventstatus)\n                this._donotcallOnbreak = true;\n            else\n                this._donotcallOnbreak = false;\n            this._sockettask.close();\n        }\n    }\n\n    /*\n        尝试恢复连接\n        opt = {\n            ns:'', 可空，如果留空则使用内存中ns地址，注意：若使用内存ns地址，无法恢复程序重启后的断线恢复\n            token: '' 可空，如果留空则使用内存中token，注意：若使用内存token，无法恢复程序重启后的断线恢复,\n            success,fail,complete\n        }\n    */\n    recover(opt){\n        opt = opt || {};\n        format.callback(opt);\n        opt.token = opt.token || this._sessionid;\n        opt.ns = opt.ns || this._ns;\n        if(this._level == 1){\n            opt._success({\n                code:200,\n                errmsg:'ok'\n            });\n            return;\n        }\n\n        //开始恢复网络\n        this.connect({\n            ns:opt.ns,\n            success:(res)=>{\n                //开始尝试恢复\n                this.request({\n                    channel:'',\n                    controller:'recover',\n                    data:opt.token,\n                    success:(res)=>{\n                        //console.log(res);\n                        this._level = 1;\n                        opt._success(res);\n                        this.onRecover();\n                    },\n                    fail:(res)=>{\n                        //console.log(res);\n                        this.break({\n                            eventstatus:false\n                        })\n                        opt._fail(res);\n                    }\n                })\n\n            },\n            fail:(res)=>{\n                opt._fail(res);\n            }\n\n        })\n\n    }\n\n    /*\n        进入频道连接 与频道交互前必须先与频道建立连接，通常情况下不需要开发者进行主动连接，NaiveNet会自动在必要的时候进行连接\n        opt = {\n            channel:'',\n            cache:true, //是否使用缓存状态 使用缓存状态可减少一次查询请求\n            success:\n            fail\n            complete\n        }\n    */\n    enterChannel(opt){\n        opt = opt || {};\n        format.callback(opt);\n\n        if(opt.channel == '')\n        {\n            opt._success({\n                code:200,\n                errmsg:'ok connect ns'\n            })\n            return;\n        }\n\n        let key = this._ns + \"_\" + opt.channel;\n        if(opt.cache){\n            let status = this._channel_cache[key];\n            if(status){\n                opt._success({\n                    code:200,\n                    errmsg:'ok use cache'\n                })\n                return;\n            }\n        }\n        this.request({\n            channel:'',\n            controller:'enterChannel',\n            data:opt.channel,\n            success:(res)=>{\n                //频道连接成功\n                this._channel_cache[key] = true;\n                opt._success({\n                    code:200,\n                    errmsg:'ok no cache'\n                })\n            },\n            fail:(res)=>{\n                opt._fail(res);\n            }\n        })\n\n\n    }\n\n    //释放频道资源（但NS连接仍然保持）\n    quitChannel(opt){\n        opt = opt || {};\n        format.callback(opt);\n        this.getChannelID({\n            channel:opt.channel,\n            success:(res)=>{\n                //console.log(res);\n                this.request({\n                    channel:'',\n                    controller:'quitChannel',\n                    data:res.id+'',\n                    complete:(res)=>{\n                        opt._success({\n                            code:200,\n                            errmsg:'ok'\n                        })\n                    }\n                })\n            }\n        })\n    }\n\n    //提供频道别名 查询 ID\n    // opt = {channel:'',success:}   res.id 为对应ID\n    getChannelID(opt){\n        opt = opt || {};\n        format.callback(opt);\n        opt.channel = opt.channel || '';\n        if(opt.channel == ''){\n            opt._success({\n                code:200,\n                id:0\n            })\n            return;\n        }\n        let database = this._channel[this._ns];\n        if(!database){ //不存在该库\n            this._channel[this._ns] = {};\n            database = {};\n        }\n        //查询该库中是否存在缓存\n        let channel = database[opt.channel];\n        if(channel){ //存在\n            opt._success({\n                code:200,\n                id:channel\n            })\n            return;\n        }\n        //不存在 去拉取\n        this.request({\n            channel:'',\n            controller:'getChannel',\n            data:opt.channel,\n            success:(res)=>{\n                //console.log(res);\n                if(res.code == 200){\n                    let id = parseInt(res.data);\n                    this._channel[this._ns][opt.channel] = id;\n                    opt._success({\n                        code:200,\n                        id: id\n                    })\n                    return;\n                }\n                opt._fail({\n                    code:400,\n                    errmsg:'获取失败'\n                })\n            },\n            fail:(res)=>{\n                opt._fail(res);\n            }\n        })\n    }\n\n    /*\n        opt={\n            channel:'', //如果留空则代表向NS发出请求\n            controller:'',\n            data:[], 可以是字符串 也可以是 Array Buffer\n            success,fail,complete\n        }\n\n    */\n    request(opt){\n        opt = opt || {};\n        format.callback(opt);\n        opt.channel = opt.channel || \"\";\n        opt.data = opt.data || \"\";\n        if(!opt.controller){\n            opt._fail({\n                code:400,\n                errmsg:'控制器（controller）不能为空'\n            });\n            return;\n        }\n        if(this._level != 1){\n            opt._fail({\n                code:400,\n                errmsg:'当前状态无法发出请求'\n            });\n            return;\n        }\n\n        this.getChannelID({\n            channel:opt.channel,\n            success:(res2)=>{\n                this.enterChannel({\n                    channel:opt.channel,\n                    cache:true,\n                    success:(res)=>{\n                        let second = false;\n                        let _opt = {\n                            channelid:res2.id,\n                            data:opt.data,\n                            controller:opt.controller,\n                            success:(res)=>{\n                                opt._success(res);\n                            },\n                            fail:(res)=>{\n                                if(res.code == 404){ //说明还没有与NS建立连接\n                                    if(second){\n                                        opt._fail(res);\n                                        return;\n                                    }\n                                    second = true;\n                                    this.enterChannel({\n                                        channel:opt.channel,\n                                        cache:false,\n                                        success:(res)=>{\n                                            this._request(_opt);\n                                        },\n                                        fail:(res)=>{\n                                            opt._fail(res);\n                                        }\n                                    })\n                                }else{\n                                    opt._fail(res);\n                                }\n                            }\n                        }\n\n                        this._request(_opt);\n                    },\n                    fail:(res)=>{\n                        opt._fail(res);\n                    }\n                })\n            },\n            fail:(res)=>{\n                opt._fail(res);\n            }\n        })\n\n    }\n\n    createBox(){\n        return new NaiveModule();\n    }\n\n    /**\n     * 添加Box\n    */\n    addBox(mod){\n        for(let i = 0 ; i < this._boxs.length;i++){\n            if(this._boxs[i] == mod)\n                return;\n        }\n        this._boxs.push(mod);\n    }\n\n    removeBox(mod){\n        for(let i = 0 ;i < this._boxs.length;i++){\n            if(this._boxs[i] == mod){\n                for(let j = i+1;j<this._boxs.length;j++){\n                    this._boxs[j-1] = this._boxs[j];\n                }\n                this._boxs.pop();\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    _request(opt,channelid){\n        opt = opt || {};\n        format.callback(opt);\n        let channelID = opt.channelid;\n        //分配临时ID 0~255\n        let id = -1;\n        if(this._t_msg.length < 255){\n            this._t_msg.push({});\n            id = this._t_msg.length - 1;\n        }else{\n            for(let i = 0;i<255;i++){\n                if(this._t_msg[i][1]){\n                    id = i;\n                    break;\n                }\n            }\n        }\n        if(id == -1){\n            this._t_wt.push(opt);\n            return;\n        }\n        //资源未满\n        let record = [\n            opt,\n            false,       //未处理\n            -1,         //定时器句柄\n            new Date().getTime(),   //发送时的时间戳\n        ];\n        this._t_msg[id] = record;\n\n        let data = opt.data || \"\";\n        if (typeof data == 'string') {\n            //将字符串转换为ArrayBuffer\n            data = this._stringToArrayBuffer(data);\n        }\n\n        //设置channelID信息\n        let channelIDData = this._genLenArrayBuffer(channelID);\n        //设置controller信息\n        let controllerData = this._stringToArrayBuffer(opt.controller);\n        let controllerDataU8 = new Uint8Array(controllerData);\n        let controllerHeader = this._genLenArrayBuffer(controllerDataU8.length);\n        //设置正文信息\n        let contentData = this._stringToArrayBuffer(opt.data);\n        let contentDataU8 = new Uint8Array(contentData);\n        let contentDataHeader = this._genLenArrayBuffer(contentDataU8.length);\n\n        //组合最终的输出流\n        let _dataA = new ArrayBuffer(channelIDData.length + controllerDataU8.length + controllerHeader.length + contentDataU8.length + contentDataHeader.length + 2);\n        let _data = new Uint8Array(_dataA);\n        _data[0] = 1;\n        _data[1] = id;      //临时ID\n        _data.set(channelIDData,2);\n        let index = 2 + channelIDData.length;\n        _data.set(controllerHeader,index);\n        index += controllerHeader.length;\n        _data.set(controllerDataU8,index);\n        index += controllerDataU8.length;\n        _data.set(contentDataHeader,index);\n        index += contentDataHeader.length;\n        _data.set(contentDataU8,index);\n        //完成 开始发送\n        try{\n            this._sockettask.send(outdata(_data.buffer));\n            //成功发送 等待确认回执\n            this._t_msg[id][2] = setTimeout(function(){\n                //超时未得到回应\n                opt._fail({\n                    code:401,\n                    errmsg:'响应超时'\n                });\n                //释放留样\n                this._t_msg[id][1] = true;\n                //检查等待资源\n                this._sendCheckWt();\n            }.bind(this),this._timeout);\n        }catch(e){\n            opt._fail({\n                code: 400,\n                errmsg: '发送失败'\n            });\n            //释放留样\n            this._t_msg[id][1] = true;\n            this._sendCheckWt();\n        }\n    }\n\n    // send(opt){\n    //     opt = opt || {};\n    //     format.callback(opt);\n\n    //     this._sockettask.send(opt.data);\n\n    // }\n\n    /*\n        心跳检测\n    */\n    _autoheart(){\n        //自动心跳\n        let next = function(){\n            if(this._level == 1){\n                this.request({\n                    controller:'heart',\n                    data: ''+this._ping\n                });\n                setTimeout(next.bind(this),this._hearttimeout);\n            }\n        }\n        next.bind(this)();\n    }\n\n    //当发生连接中断时\n    _onBreak(){\n        if(!this._donotcallOnbreak)\n            this.onBreak({\n                code:400,\n                errmsg:'break'\n            });\n        this._donotcallOnbreak = false;\n    }\n\n    _parseMsg(res){\n        let udata = new Uint8Array(res.data);\n        if(udata[0] == 0 || udata[0] == 3){ //0 代表正常回复 3 代表异常回复\n            //在回复某一请求的响应\n            let id = udata[1];\n            let msg = this._t_msg[id];\n            //判断是否有必要处理该消息\n            //console.log(id);\n            if(msg[1])  //该消息已无需处理\n                return;\n            //解析频道ID\n            let index = 2;\n            let channel_data = this._parseLenArrayBuffer(index,udata);\n            let channel_id = channel_data[1];\n\n            //解析参数长度\n            index += channel_data[0];\n            let param_len = this._parseLenArrayBuffer(index,udata);\n            index += param_len[0];\n            let param_content = this._parseContentArrayBuffer(index,udata,param_len[1]);\n\n            let ping = new Date().getTime() - msg[3];\n            this._setPing(ping);\n            msg[1] = true;\n            clearTimeout(msg[2]);\n\n            if(udata[0] == 0){ //正常回复\n                msg[0]._success({\n                    code : 200,\n                    originData : param_content,\n                    data : this._autocode ? this.Uint8ArrayToString(param_content) : null,\n                    errmsg : codemap[200]\n                })\n            }else{ //异常回复\n                //ole.log('异常回复',udata);\n                let code = parseInt(this.Uint8ArrayToString(param_content))\n                msg[0]._fail({\n                    code : code,\n                    errmsg: codemap[code]\n                })\n            }\n            this._sendCheckWt();\n            return;\n        }else if(udata[0] == 1){ //请求\n            let control = udata[0];\n            let msgid = udata[1];\n            //解析频道\n            let index = 2;\n            let channelid_data = this._parseLenArrayBuffer(index,udata);\n            let channelid = channelid_data[1];\n            index += channelid_data[0];\n            let end = index - 1;\n            let ctrl_len = this._parseLenArrayBuffer(index,udata);\n            index += ctrl_len[0];\n            let ctrl_content = this._parseContentArrayBuffer(index,udata,ctrl_len[1]);\n            index += ctrl_len[1];\n            let param_len = this._parseLenArrayBuffer(index,udata);\n            index += param_len[0];\n            let param_content = this._parseContentArrayBuffer(index,udata,param_len[1]);\n            if(channelid == 0){ //来自NS的请求\n                this._dealNSToClient(\n                    this.Uint8ArrayToString(ctrl_content),\n                    this.Uint8ArrayToString(param_content)\n                )\n            }else{ //来自NC的请求\n                this._dealNCToClient(\n                    {\n                        originContent:udata,\n                        originHeaderEndIndex:end,\n                        originMsgID:msgid,\n                        originChannelID:channelid,\n                        controller:this.Uint8ArrayToString(ctrl_content),\n                        dataBytes:param_content,\n                        data: this._autocode ? this.Uint8ArrayToString(param_content) : null\n                    }\n                )\n            }\n\n        }\n\n    }\n\n    //处理来自NS服务器的请求\n    _dealNSToClient(controller,param){\n\n        switch(controller){\n            case 'auth':\n                this._auth = true;\n                this._sessionid = param;\n                this.onAuth({\n                    code:200,\n                    errmsg:'ok',\n                    token:param\n                })\n                break;\n\n        }\n\n    }\n\n    //处理来自频道的请求\n    /*\n        {\n            originContent:udata,\n            originHeaderEndIndex:end,\n            originMsgID:msgid,\n            originChannelID:channelid,\n            controller:this.Uint8ArrayToString(ctrl_content),\n            dataBytes:param_content,\n            data: this._autocode ? this.Uint8ArrayToString(param_content) : null\n        }\n    */\n    _dealNCToClient(opt){\n\n        let t = this;\n        let response = function(res = ''){\n            t._response(opt,true,res)\n        }\n        for(let i in this._boxs){\n            let r = this._boxs[i]._do(opt,response);\n            if(r){ //找到对应控制器\n                return;\n            }\n        }\n        //未找到对应控制器\n        this._response(opt,false,null);\n\n    }\n\n    //回复\n    /*\n        {\n            originContent:udata,\n            originHeaderEndIndex:end,\n            originMsgID:msgid,\n            originChannelID:channelid,\n            controller:this.Uint8ArrayToString(ctrl_content),\n            dataBytes:param_content,\n            data: this._autocode ? this.Uint8ArrayToString(param_content) : null\n        }\n    */\n    _response(opt,success,param = null){\n\n        //ole.log('回应NC',arguments);\n\n        let data = (typeof param == 'string') ? this._stringToArrayBuffer(param) : param;\n        let data_U8 = new Uint8Array(data);\n        let data_len = this._genLenArrayBuffer(data_U8.length);\n\n        let content = new ArrayBuffer(opt.originHeaderEndIndex + 1 + data_len.length + data_U8.length);\n        let _content = new Uint8Array(content);\n\n        for(let i = 0; i<= opt.originHeaderEndIndex ;i++){\n            _content[i] = opt.originContent[i];\n        }\n        if(success){\n            _content[0] = 0;\n        }else{\n            _content[0] = 3;\n        }\n        let index = opt.originHeaderEndIndex + 1;\n        _content.set(data_len,index);\n        index += data_len.length;\n        _content.set(data_U8,index);\n\n        //onsole.log(_content.buffer)\n        this._sockettask.send(\n            outdata(_content.buffer)\n        );\n    }\n\n    /*\n        检查等待资源\n    */\n    _sendCheckWt(){\n        if(this._t_wt.length > 0){\n            let item = this._t_wt.shift();\n            this.request(item);\n        }\n    }\n\n    _setPing(ping){\n        this._ping = parseInt(ping/2);\n        this.onPingChange(this._ping);\n    }\n\n    getPing(){\n        return this._ping;\n    }\n\n    //解析长度位算法\n    _parseLenArrayBuffer(start,data){\n        let value = 0;\n        let n = 0;\n        for(let i = start;i<data.length;i++){\n            let a = data[i];\n            if(a != 255){\n                return [1,a];\n            }\n            value += a;\n            n++;\n        }\n\n        return new [n,value];\n    }\n    \n    //解析长度位正文\n    _parseContentArrayBuffer(start,data,length){\n        //其中大于255 一个数字占3位\n        let _data = [];\n        let index = start;\n        for(let i = 0; i< length;index++){\n            _data.push(data[index]);\n            i+=1;\n        }\n        let content = new Uint8Array(_data);\n        //console.log(this.Uint8ArrayToString(content));\n        return content;\n    }\n\n    //生产长度位算法\n    _genLenArrayBuffer(length){\n        let len = parseInt(length / 255 ) + 1;\n        let data = new ArrayBuffer(len);\n        let _data = new Uint8Array(data);\n        for(let i = 0;i<len;i++){\n            if(length > 255){\n                _data = 255;\n                length -= 255;\n            }else{\n                _data[i] = length;\n                break;\n            }\n        }\n        return _data;\n    }\n\n    _stringToArrayBuffer(str) {\n        var bytes = new Array(); \n        var len,c;\n        len = str.length;\n        for(var i = 0; i < len; i++){\n            c = str.charCodeAt(i);\n            if(c >= 0x010000 && c <= 0x10FFFF){\n                bytes.push(((c >> 18) & 0x07) | 0xF0);\n                bytes.push(((c >> 12) & 0x3F) | 0x80);\n                bytes.push(((c >> 6) & 0x3F) | 0x80);\n                bytes.push((c & 0x3F) | 0x80);\n            }else if(c >= 0x000800 && c <= 0x00FFFF){\n                bytes.push(((c >> 12) & 0x0F) | 0xE0);\n                bytes.push(((c >> 6) & 0x3F) | 0x80);\n                bytes.push((c & 0x3F) | 0x80);\n            }else if(c >= 0x000080 && c <= 0x0007FF){\n                bytes.push(((c >> 6) & 0x1F) | 0xC0);\n                bytes.push((c & 0x3F) | 0x80);\n            }else{\n                bytes.push(c & 0xFF);\n            }\n      }\n      var array = new Int8Array(bytes.length);\n      for(var i in bytes){\n        array[i] =bytes[i];\n      }\n        return array.buffer;\n    }\n\n    _arrayBufferToString(arr){\n        if(typeof arr === 'string') {  \n            return arr;  \n        }  \n        var dataview=new DataView(arr.data);\n        var ints=new Uint8Array(arr.data.byteLength);\n        for(var i=0;i<ints.length;i++){\n          ints[i]=dataview.getUint8(i);\n        }\n        arr=ints;\n        var str = '',  \n            _arr = arr;  \n        for(var i = 0; i < _arr.length; i++) {  \n            var one = _arr[i].toString(2),  \n                v = one.match(/^1+?(?=0)/);  \n            if(v && one.length == 8) {  \n                var bytesLength = v[0].length;  \n                var store = _arr[i].toString(2).slice(7 - bytesLength);  \n                for(var st = 1; st < bytesLength; st++) {  \n                    store += _arr[st + i].toString(2).slice(2);  \n                }  \n                str += String.fromCharCode(parseInt(store, 2));  \n                i += bytesLength - 1;  \n            } else {  \n                str += String.fromCharCode(_arr[i]);  \n            }  \n        }  \n        return str; \n    }\n\n    \n    Uint8ArrayToString(array){\n        var out, i, len, c;\n        var char2, char3;\n     \n        out = \"\";\n        len = array.length;\n        i = 0;\n        while(i < len) {\n        c = array[i++];\n        switch(c >> 4)\n        { \n          case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n            // 0xxxxxxx\n            out += String.fromCharCode(c);\n            break;\n          case 12: case 13:\n            // 110x xxxx   10xx xxxx\n            char2 = array[i++];\n            out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n            break;\n          case 14:\n            // 1110 xxxx  10xx xxxx  10xx xxxx\n            char2 = array[i++];\n            char3 = array[i++];\n            out += String.fromCharCode(((c & 0x0F) << 12) |\n                           ((char2 & 0x3F) << 6) |\n                           ((char3 & 0x3F) << 0));\n            break;\n        }\n        }\n     \n        return out;\n      }\n}\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst NaiveNet = require('NaiveNetClient-mini.2.0.1.dev');\r\nconst ns = new NaiveNet();\r\nlet colormap = [\r\n\tcc.color(153,235,73),\r\n\tcc.color(235,229,73),\r\n\tcc.color(79,181,239),\r\n\tcc.color(244,126,215),\r\n\tcc.color(131,146,184),\r\n\tcc.color(134,242,162),\r\n\tcc.color(227,251,176)\r\n];\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        canvas:{\r\n        \ttype:cc.Node,\r\n        \tdefault:null\r\n        },\r\n        ping:{\r\n        \ttype:cc.Label,\r\n        \tdefault:null\r\n        },\r\n        ctx:null,\r\n        x_b:0,\t//水平偏移量\r\n        y_b:0,\t//垂直偏移量\r\n        line_w:50,\t//线宽\r\n        running:false,\t\t//是否在运动\r\n    \ta:0,\t\t\t\t//运动方向\r\n    \tstep:1,\t\t//单步像素\r\n    \tLabel:{\r\n    \t\ttype:cc.Label,\r\n    \t\tdefault:null\r\n    \t},\r\n    \tid:0,\r\n    \tuploading:false,\r\n    \tneedUpload:false,\r\n    \tdata:[]\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n    \tthis.ctx = this.node.getComponent(cc.Graphics);\r\n    \tthis.ctx.lineWidth = 1.5;\r\n    \tthis.ctx.strokeColor = cc.color(132,252,237,255*0.8);\r\n\r\n    \tconsole.log(this.Label);\r\n    \tthis.Label.string = \"正在尝试建立连接\";\r\n    \tlet box = ns.createBox();\r\n\t\tbox.addController(\r\n\t\t\t'updatedata',\r\n\t\t\tfunction(res,response){\r\n\t\t\t\tresponse();\r\n\r\n\t\t\t\tlet json = res.data;\r\n\t\t\t\tlet ob = JSON.parse(json);\r\n\t\t\t\tthis.data = ob;\r\n\t\t\t}.bind(this)\r\n\t\t);\r\n\t\tns.addBox(box);\r\n    \tns.onBreak = function(){\r\n    \t\t//this.Label.string = \"网络断开，请刷新\";\r\n    \t}.bind(this)\r\n    \tns.connect({\r\n    \t\tns:'ws://ns01.domoe.cn:1000',\r\n    \t\tsuccess:(res)=>{\r\n    \t\t\tthis.Label.string = \"建立成功，正在申请授权\";\r\n\r\n    \t\t\tns.request({\r\n    \t\t\t\tchannel:'auth',\r\n    \t\t\t\tcontroller:'auth',\r\n    \t\t\t\tdata:'ballbattle',\r\n    \t\t\t\tsuccess:(res)=>{\r\n    \t\t\t\t\t// ns.quitChannel({\r\n    \t\t\t\t\t// \tchannel:'auth'\r\n    \t\t\t\t\t// })\r\n    \t\t\t\t\tconsole.log(res);\r\n    \t\t\t\t\tif(res.data = \"ok\"){\r\n\t    \t\t\t\t\tthis.Label.string = \"正在访问实时资源...\";\r\n\t    \t\t\t\t\tns.request({\r\n\t    \t\t\t\t\t\tchannel:'play',\r\n\t    \t\t\t\t\t\tcontroller:'enter',\r\n\t    \t\t\t\t\t\tsuccess:(res)=>{\r\n\t    \t\t\t\t\t\t\tconsole.log(res);\r\n\t    \t\t\t\t\t\t\tif(res.data == 'full'){\r\n\t    \t\t\t\t\t\t\t\tthis.Label.string = \"请求用户过多，无法控制小球\";\r\n\t    \t\t\t\t\t\t\t\treturn;\r\n\t    \t\t\t\t\t\t\t}else{\r\n\t    \t\t\t\t\t\t\t\tthis.Label.string = \"#\"+res.data;\r\n\t    \t\t\t\t\t\t\t\t//可以控制\r\n\t    \t\t\t\t\t\t\t\tthis.id = res.data;\r\n\t    \t\t\t\t\t\t\t}\r\n\t    \t\t\t\t\t\t},\r\n\t\t\t    \t\t\t\tfail:(res)=>{\r\n\t\t\t    \t\t\t\t\tconsole.log(res)\r\n\t\t\t    \t\t\t\t\tthis.Label.string = \"访问失败，请刷新重试\";\r\n\t\t\t    \t\t\t\t\tns.close();\r\n\t\t\t    \t\t\t\t}\r\n\t    \t\t\t\t\t})\r\n\r\n    \t\t\t\t\t}else{\r\n\t    \t\t\t\t\tthis.Label.string = \"申请失败，请刷新重试\";\r\n\t    \t\t\t\t\tns.close();\r\n    \t\t\t\t\t}\r\n    \t\t\t\t},\r\n    \t\t\t\tfail:(res)=>{\r\n    \t\t\t\t\tthis.Label.string = \"申请失败，请刷新重试\";\r\n    \t\t\t\t\tns.close();\r\n    \t\t\t\t}\r\n\r\n    \t\t\t})\r\n\r\n\r\n    \t\t},\r\n    \t\tfail:(res)=>{\r\n    \t\t\tthis.Label.string = \"连接建立失败，请刷新重试\";\r\n    \t\t}\r\n    \t})\r\n    \tns.onPingChange = function(res){\r\n    \t\tthis.ping.string = \"ping:\"+res+'ms';\r\n    \t}.bind(this)\r\n\r\n    },\r\n\r\n    start () {\r\n    \tthis.drawNet();\r\n    \tthis.drawBall();\r\n\r\n    },\r\n\r\n    update (dt) {\r\n    \tthis.drawNet();\r\n    \tthis.drawBall();\r\n    \tthis.drawOthersBall();\r\n    },\r\n\r\n    drawOthersBall(){\r\n\r\n\r\n\r\n\r\n    },\r\n\r\n    drawNet(){\r\n    \tthis.ctx.clear();\r\n    \tlet width = this.canvas.width / 2;\r\n    \tlet height = this.canvas.height / 2;\r\n    \t\r\n    \t//开始绘制网格\r\n    \t//先绘制水平线\r\n    \tfor(let y = height*-1 + this.y_b % this.line_w ; y < height ; y += this.line_w){\r\n    \t\tthis.ctx.moveTo( -width ,y);\r\n    \t\tthis.ctx.lineTo( width , y);\r\n    \t}\r\n    \tfor(let x = width*-1 + this.x_b % this.line_w ; x < width ; x += this.line_w){\r\n    \t\tthis.ctx.moveTo( x, -height);\r\n    \t\tthis.ctx.lineTo( x, height);\r\n    \t}\r\n\r\n\r\n    \tthis.ctx.stroke();\r\n    },\r\n\r\n    drawBall(){\r\n    \t// if(this.id == null){\r\n    \t// \t//没有移动权限\r\n\r\n    \t// \treturn;\r\n    \t// }\r\n\r\n    \tfor(let i in this.data){\r\n    \t\tthis.ctx.fillColor = colormap[parseInt(this.data[i].id)%colormap.length];\r\n    \t\tthis.ctx.circle(-(this.data[i].x - this.x_b ),-(this.data[i].y - this.y_b) ,70);\r\n\t    \tthis.ctx.fill();\r\n\t    \tthis.ctx.stroke();\r\n    \t}\r\n\r\n    \t// this.ctx.fillColor = cc.color(227,251,176);\r\n    \t// this.ctx.circle(0,0,70);\r\n    \t// this.ctx.fill();\r\n    \t// this.ctx.stroke();\r\n    },\r\n\r\n    startrun(location){\t\t//开始移动 .x .y\r\n\r\n    \tif(this.id == null){\r\n    \t\t//没有移动权限\r\n\r\n    \t\treturn;\r\n    \t}\r\n\r\n    \tlet center = [\r\n\t    \tthis.canvas.width / 2,\r\n    \t\tthis.canvas.height / 2\r\n    \t];\r\n    \tlet dx = location.x - center[0] , dy = location.y - center[1];\r\n    \tlet l = Math.sqrt(dx * dx + dy * dy);\r\n    \tlet a = 0;\r\n    \tlet cosa = dx / l;\r\n    \ta = Math.acos(cosa);\r\n    \tif(dy < 0)\r\n    \t\ta *= -1;\r\n\t\r\n\t\t//角度值\r\n\t\t//console.log(360 * (a / ( 2 * Math.PI)));\r\n\t\tthis.a = a;\r\n\r\n\t\tlet run = function(){\r\n\t\t\t//计算动作偏移\r\n\t\t\tthis.x_b -= Math.cos(this.a) * this.step;\r\n\t\t\tthis.y_b -= Math.sin(this.a) * this.step;\r\n\r\n\t\t\tif(this.x_b < -5000)\r\n\t\t\t\tthis.x_b = -5000;\r\n\t\t\tif(this.x_b > 5000)\r\n\t\t\t\tthis.x_b = 5000;\r\n\t\t\tif(this.y_b > 5000)\r\n\t\t\t\tthis.y_b = 5000;\r\n\t\t\tif(this.y_b < -5000)\r\n\t\t\t\tthis.y_b = -5000;\r\n\r\n\t\t\tthis.needUpload = true;\r\n\t\t\tthis.upload();\r\n\r\n\t\t\tthis.update();\r\n\t\t\tif(this.running)\r\n\t\t\t\tsetTimeout(run.bind(this),1000/60);\r\n\t\t}\r\n\t\tif(!this.running){\r\n\t\t\tthis.running = true;\r\n\t\t\trun.bind(this)();\r\n\t\t}\r\n\r\n    },\r\n    stoprun:function(){\r\n    \tthis.running = false;\r\n    },\r\n    upload:function(){\r\n    \t//上传 上传时要控制上传频率 每成功提交一次上传则上传下一次\r\n\r\n    \tif(this.uploading){\r\n    \t\treturn;\r\n    \t}\r\n    \tthis.uploading = true;\r\n    \tthis.needUpload = false;\r\n    \tns.request({\r\n    \t\tchannel:'play',\r\n    \t\tcontroller:'move',\r\n    \t\tdata:JSON.stringify({\r\n    \t\t\tx:parseInt(this.x_b),\r\n    \t\t\ty:parseInt(this.y_b)\r\n    \t\t}),\r\n    \t\tcomplete:(res)=>{\r\n    \t\t\tthis.uploading = false;\r\n    \t\t\tif(this.needUpload){\r\n    \t\t\t\tthis.upload();\r\n    \t\t\t}\r\n    \t\t}\r\n    \t})\r\n\r\n    }\r\n});\r\n"],"file":"index.js"}